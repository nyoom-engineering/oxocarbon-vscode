name: Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  determine:
    name: Determine Release Type
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.meta.outputs.release_type }}
      tag: ${{ steps.meta.outputs.tag }}
      suffix: ${{ steps.meta.outputs.suffix }}
      release_name: ${{ steps.meta.outputs.release_name }}
      version: ${{ steps.meta.outputs.version }}
      name: ${{ steps.meta.outputs.name }}
      display_name: ${{ steps.meta.outputs.display_name }}
      sha_short: ${{ steps.meta.outputs.sha_short }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Compute release metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          NAME=$(jq -r .name package.json)
          VERSION=$(jq -r .version package.json)
          DISPLAY_NAME=$(jq -r .displayName package.json)
          SHA_SHORT=$(git rev-parse --short HEAD)
          DATE=$(date -u +%Y%m%d)

          PREV_VERSION=""
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            if git show HEAD^:package.json >/tmp/prev-package.json 2>/dev/null; then
              PREV_VERSION=$(jq -r .version /tmp/prev-package.json)
            fi
          fi

          if [ -n "$PREV_VERSION" ] && [ "$PREV_VERSION" = "$VERSION" ]; then
            RELEASE_TYPE="nightly"
            TAG="nightly-$DATE-$SHA_SHORT"
            SUFFIX="$DATE-$SHA_SHORT"
            RELEASE_NAME="Nightly $DATE ($SHA_SHORT)"
          else
            RELEASE_TYPE="stable"
            TAG="v$VERSION"
            SUFFIX="$VERSION"
            RELEASE_NAME="$DISPLAY_NAME v$VERSION"
          fi

          {
            echo "release_type=$RELEASE_TYPE"
            echo "tag=$TAG"
            echo "suffix=$SUFFIX"
            echo "release_name=$RELEASE_NAME"
            echo "version=$VERSION"
            echo "name=$NAME"
            echo "display_name=$DISPLAY_NAME"
            echo "sha_short=$SHA_SHORT"
          } >> "$GITHUB_OUTPUT"

  unix-themes:
    name: Build Unix Themes
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            target/zed/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          brew install jq cmake

      - name: Build themes
        shell: bash
        run: |
          set -euo pipefail
          make all zed textmate xcode sublime-ui

      - name: Upload themes artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unix-themes
          if-no-files-found: warn
          path: |
            themes/*.json
            textmate/**/*.tmTheme
            intellij/**/*.icls
            xcode/**/*.xccolortheme
            zed/oxocarbon.json
            sublime-ui/

  visualstudio:
    name: Build Visual Studio Theme
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '6.0.x'

      - name: Clone theme converter
        run: git clone --depth 1 https://github.com/microsoft/theme-converter-for-vs.git

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('theme-converter-for-vs/**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Build converter
        working-directory: theme-converter-for-vs/ThemeConverter
        run: dotnet build -c Release

      - name: Convert VS Code themes to Visual Studio
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $inputDir = Join-Path $env:GITHUB_WORKSPACE 'themes'
          $outputDir = Join-Path $env:GITHUB_WORKSPACE 'visualstudio'
          if (Test-Path $outputDir) { Remove-Item -Recurse -Force $outputDir }
          New-Item -ItemType Directory -Force -Path $outputDir | Out-Null
          $root = Join-Path $env:GITHUB_WORKSPACE 'theme-converter-for-vs'
          $exe = Get-ChildItem -Path $root -Filter ThemeConverter.exe -Recurse -File | Select-Object -ExpandProperty FullName -First 1
          if (-not $exe) { throw "ThemeConverter.exe not found under $root" }
          $exeDir = Split-Path -Parent $exe
          Push-Location $exeDir
          try {
            Get-ChildItem -Path $inputDir -Filter *.json -File | ForEach-Object { & .\ThemeConverter.exe -i $_.FullName -o $outputDir }
          } finally {
            Pop-Location
          }

      - name: Upload Visual Studio themes
        uses: actions/upload-artifact@v4
        with:
          name: visualstudio
          if-no-files-found: warn
          path: visualstudio/**

  vsix:
    name: Package VSIX
    runs-on: ubuntu-latest
    needs: determine
    env:
      NAME: ${{ needs.determine.outputs.name }}
      VERSION: ${{ needs.determine.outputs.version }}
      RELEASE_TYPE: ${{ needs.determine.outputs.release_type }}
      SHA_SHORT: ${{ needs.determine.outputs.sha_short }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20

      - name: Package VSCode extension (.vsix)
        shell: bash
        run: |
          set -euo pipefail
          if [ "$RELEASE_TYPE" = "nightly" ]; then
            TARGET="${NAME}-${VERSION}-${SHA_SHORT}.vsix"
          else
            TARGET="${NAME}-${VERSION}.vsix"
          fi
          npx --yes @vscode/vsce package -o "$TARGET"

      - name: Upload VSIX
        uses: actions/upload-artifact@v4
        with:
          name: vsix
          path: "*.vsix"

  release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [determine, unix-themes, visualstudio, vsix]
    permissions:
      contents: write
    env:
      RELEASE_TYPE: ${{ needs.determine.outputs.release_type }}
      SUFFIX: ${{ needs.determine.outputs.suffix }}
      TAG: ${{ needs.determine.outputs.tag }}
      RELEASE_NAME: ${{ needs.determine.outputs.release_name }}
      NAME: ${{ needs.determine.outputs.name }}
      VERSION: ${{ needs.determine.outputs.version }}
      SHA_SHORT: ${{ needs.determine.outputs.sha_short }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: dist

      - name: Prepare release files
        shell: bash
        run: |
          set -euo pipefail
          ls -R dist || true
          # Flatten VSIX
          mkdir -p release
          if compgen -G "dist/vsix/*.vsix" > /dev/null; then
            mv dist/vsix/*.vsix release/
          fi
          while IFS='|' read -r src name; do
            [ -z "$src" ] && continue
            if [ -d "$src" ]; then
              (cd "$src" && zip -r "${GITHUB_WORKSPACE}/release/${name}-${SUFFIX}.zip" .)
            fi
          done <<'EOF'
          dist/unix-themes/themes|themes
          dist/unix-themes/textmate|textmate
          dist/unix-themes/zed|zed
          dist/unix-themes/xcode|xcode
          dist/unix-themes/sublime-ui|sublime-ui
          dist/visualstudio|visualstudio
          EOF

      - name: Collect files
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          files=$(ls -1 release/* 2>/dev/null || true)
          echo 'list<<EOF' >> "$GITHUB_OUTPUT"
          echo "$files" >> "$GITHUB_OUTPUT"
          echo 'EOF' >> "$GITHUB_OUTPUT"

      - name: Generate release body
        id: body
        shell: bash
        run: |
          set -euo pipefail
          BODY="release/BODY.md"
          : > "$BODY"
          {
            echo "## Installation"
            echo
            if compgen -G "release/intellij-*.zip" > /dev/null; then
              echo "### IntelliJ IDEA:"
              echo
              echo "- Unzip the IntelliJ archive."
              echo '- In IntelliJ: Settings > Editor > Color Scheme > Import Scheme..., then select the `*.icls` files'
              echo
            fi
            if compgen -G "release/textmate-*.zip" > /dev/null; then
              echo "### TextMate (macOS):"
              echo
              echo "- Unzip the TextMate archive."
              echo '- Copy the `.tmTheme` files to `~/Library/Application Support/TextMate/Themes`'
              echo
            fi
            if compgen -G "release/sublime-ui-*.zip" > /dev/null; then
              echo "### Sublime Text (macOS):"
              echo
              echo '  - Copy the `.tmTheme` files to `~/Library/Application Support/Sublime Text/Packages/User`'
              echo "  - Then select it via Preferences > Color Scheme"
              echo "- Unzip the Sublime UI archive."
              echo '- Copy the `.tmTheme` files to `~/Library/Application Support/Sublime Text/Packages/User`'
              echo "  - Then select color scheme via Preferences > Color Scheme"
              echo '- Copy the `.sublime-theme` files to `~/Library/Application Support/Sublime Text/Packages/User`'
              echo '- Select the theme via Preferences > Select Theme'
              echo
              echo "### Sublime Merge:"
              echo '- See https://github.com/sublimehq/sublime_merge/issues/198#issuecomment-471042729'
            fi
            if compgen -G "release/*.vsix" > /dev/null; then
              VSIX=$(basename "$(ls -1 release/*.vsix | head -n1)")
              echo "### VS Code:"
              echo
              echo '- Install via UI: Extensions > ... > Install from VSIX... and select `*.vsix`'
              echo "- Or via CLI (Unix):"
              echo '```bash'
              echo "code --install-extension *.vsix"
              echo '```'
              echo
            fi
            if compgen -G "release/visualstudio-*.zip" > /dev/null; then
              echo "### Visual Studio (Windows):"
              echo
              echo "- Unzip the Visual Studio archive."
              echo '- Copy the `.pkgdef` files to `<vs_install_dir>\\Common7\\IDE\\CommonExtensions\\Platform`'
              echo "- Example:"
              echo '```'
              echo 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Platform'
              echo '```'
              echo
            fi
            if compgen -G "release/xcode-*.zip" > /dev/null; then
              echo "### Xcode (macOS):"
              echo
              echo "- Unzip the Xcode archive."
              echo '- Copy the `.xccolortheme` files to `~/Library/Developer/Xcode/UserData/FontAndColorThemes`'
              echo
            fi
            if compgen -G "release/zed-*.zip" > /dev/null; then
              echo "### Zed (Unix):"
              echo
              echo "- Unzip the Zed archive."
              echo '- Copy `oxocarbon.json` to `~/.config/zed/themes/`'
              echo
            fi
          } >> "$BODY"

      - name: Setup Node.js
        if: env.RELEASE_TYPE == 'stable'
        uses: actions/setup-node@v5
        with:
          node-version: 20

      - name: Publish to Visual Studio Marketplace
        if: env.RELEASE_TYPE == 'stable'
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${VSCE_PAT:-}" ]; then
            echo "VSCE_PAT secret is required to publish" >&2
            exit 1
          fi
          VSIX="release/${NAME}-${VERSION}.vsix"
          if [ ! -f "$VSIX" ]; then
            echo "VSIX package not found" >&2
            exit 1
          fi
          npx --yes @vscode/vsce publish --packagePath "$VSIX"

      - name: Publish to OpenVSX
        if: env.RELEASE_TYPE == 'stable'
        env:
          OVSX_TOKEN: ${{ secrets.OVSX_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${OVSX_TOKEN:-}" ]; then
            echo "OVSX_TOKEN secret is required to publish" >&2
            exit 1
          fi
          VSIX="release/${NAME}-${VERSION}.vsix"
          if [ ! -f "$VSIX" ]; then
            echo "VSIX package not found" >&2
            exit 1
          fi
          npx --yes ovsx publish "$VSIX"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.RELEASE_NAME }}
          prerelease: ${{ env.RELEASE_TYPE != 'stable' }}
          body_path: release/BODY.md
          files: ${{ steps.collect.outputs.list }}


