name: Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unix-themes:
    name: Build Unix Themes
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            target/zed/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          for pkg in jq cmake; do
            if brew list --versions "$pkg" >/dev/null 2>&1; then
              echo "$pkg already installed"
            else
              brew install "$pkg"
            fi
          done

      - name: Build themes
        shell: bash
        run: |
          set -euo pipefail
          # make zed textmate intellij TODO
          make zed textmate

      - name: Upload themes artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unix-themes
          if-no-files-found: warn
          path: |
            themes/*.json
            textmate/**/*.tmTheme
            intellij/**/*.icls
            zed/oxocarbon.json

  visualstudio:
    name: Build Visual Studio Theme
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '6.0.x'

      - name: Clone theme converter
        run: git clone --depth 1 https://github.com/microsoft/theme-converter-for-vs.git

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('theme-converter-for-vs/**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Build converter
        working-directory: theme-converter-for-vs/ThemeConverter
        run: dotnet build -c Release

      - name: Convert VS Code themes to Visual Studio
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $inputDir = Join-Path $env:GITHUB_WORKSPACE 'themes'
          $outputDir = Join-Path $env:GITHUB_WORKSPACE 'visualstudio'
          if (Test-Path $outputDir) { Remove-Item -Recurse -Force $outputDir }
          New-Item -ItemType Directory -Force -Path $outputDir | Out-Null
          $root = Join-Path $env:GITHUB_WORKSPACE 'theme-converter-for-vs'
          $exe = Get-ChildItem -Path $root -Filter ThemeConverter.exe -Recurse -File | Select-Object -ExpandProperty FullName -First 1
          if (-not $exe) { throw "ThemeConverter.exe not found under $root" }
          $exeDir = Split-Path -Parent $exe
          Push-Location $exeDir
          try {
            Get-ChildItem -Path $inputDir -Filter *.json -File | ForEach-Object { & .\ThemeConverter.exe -i $_.FullName -o $outputDir }
          } finally {
            Pop-Location
          }

      - name: Upload Visual Studio themes
        uses: actions/upload-artifact@v4
        with:
          name: visualstudio
          if-no-files-found: warn
          path: visualstudio/**

  vsix:
    name: Package VSIX
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20

      - name: Compute metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          NAME=$(jq -r .name package.json)
          VERSION=$(jq -r .version package.json)
          SHA_SHORT=$(git rev-parse --short HEAD)
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "sha_short=$SHA_SHORT" >> "$GITHUB_OUTPUT"

      - name: Package VSCode extension (.vsix)
        shell: bash
        run: |
          npx --yes @vscode/vsce package -o "${{ steps.meta.outputs.name }}-${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.sha_short }}.vsix"

      - name: Upload VSIX
        uses: actions/upload-artifact@v4
        with:
          name: vsix
          path: "*.vsix"

  release:
    name: Create GitHub prerelease
    runs-on: ubuntu-latest
    needs: [unix-themes, visualstudio, vsix]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: dist

      - name: Compute metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          DATE=$(date -u +%Y%m%d)
          SHA_SHORT=$(git rev-parse --short HEAD)
          TAG="nightly-$DATE-$SHA_SHORT"
          SUFFIX="$DATE-$SHA_SHORT"
          echo "date=$DATE" >> "$GITHUB_OUTPUT"
          echo "sha_short=$SHA_SHORT" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"

      - name: Prepare release files
        shell: bash
        run: |
          set -euo pipefail
          ls -R dist || true
          # Flatten VSIX
          mkdir -p release
          if compgen -G "dist/vsix/*.vsix" > /dev/null; then
            mv dist/vsix/*.vsix release/
          fi
          while IFS='|' read -r src name; do
            [ -z "$src" ] && continue
            if [ -d "$src" ]; then
              (cd "$src" && zip -r "${GITHUB_WORKSPACE}/release/${name}-${{ steps.meta.outputs.suffix }}.zip" .)
            fi
          done <<'EOF'
          dist/unix-themes/themes|themes
          dist/unix-themes/textmate|textmate
          dist/unix-themes/zed|zed
          dist/visualstudio|visualstudio
          EOF

      - name: Collect files
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          files=$(ls -1 release/* 2>/dev/null || true)
          echo 'list<<EOF' >> "$GITHUB_OUTPUT"
          echo "$files" >> "$GITHUB_OUTPUT"
          echo 'EOF' >> "$GITHUB_OUTPUT"

      - name: Generate release body
        id: body
        shell: bash
        run: |
          set -euo pipefail
          BODY="release/BODY.md"
          : > "$BODY"
          {
            echo "## Installation"
            echo
            if compgen -G "release/*.vsix" > /dev/null; then
              VSIX=$(basename "$(ls -1 release/*.vsix | head -n1)")
              echo "### VS Code"
              echo
              echo "- Install via UI: Extensions > ... > Install from VSIX... and select $VSIX"
              echo "- Or via CLI:"
              echo '```bash'
              echo "code --install-extension \"$PWD/release/$VSIX\""
              echo '```'
              echo
            fi
            if compgen -G "release/zed-*.zip" > /dev/null; then
              echo "### Zed"
              echo
              echo "- Unzip the Zed archive."
              echo "- Copy oxocarbon.json to ~/.config/zed/themes/"
              echo
            fi
            if compgen -G "release/textmate-*.zip" > /dev/null; then
              echo "### TextMate"
              echo
              echo "- Unzip the TextMate archive."
              echo "- Copy the .tmTheme files to ~/Library/Application Support/TextMate/Themes"
              echo
            fi
            if compgen -G "release/intellij-*.zip" > /dev/null; then
              echo "### IntelliJ IDEA"
              echo
              echo "- Unzip the IntelliJ archive."
              echo "- In IntelliJ: Settings > Editor > Color Scheme > Import Scheme..., then select the .icls files"
              echo
            fi
            if compgen -G "release/intellij-*.zip" > /dev/null; then
              echo "### TextMate"
              echo
              echo "- Unzip the IntelliJ archive."
              echo "- Install .icls files to IntelliJ IDEA"
            fi
            if compgen -G "release/visualstudio-*.zip" > /dev/null; then
              echo "### Visual Studio"
              echo
              echo "- Unzip the Visual Studio archive."
              echo "- Copy the .pkgdef files to <vs_install_dir>\\Common7\\IDE\\CommonExtensions\\Platform"
              echo "- Example:"
              echo '```'
              echo 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Platform'
              echo '```'
              echo
            fi
          } >> "$BODY"

      - name: Create GitHub prerelease
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: Nightly ${{ steps.meta.outputs.date }} (${{ steps.meta.outputs.sha_short }})
          prerelease: true
          body_path: release/BODY.md
          files: ${{ steps.collect.outputs.list }}


